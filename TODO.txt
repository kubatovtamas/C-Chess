1. Make:
    1. production target
    2. debug target
    3. unit test target
    4. main test target

2. Cunit tests
3. Profiling tests, valgrind (???)
macros, dynamic library, debug mode would be nice

Lib:
     - initialize board
     - save state
     - step (change state)
         * Hit
         * Castling
         * Promotion
     - undo, redo
     - save match
     - load match

Main:
     - request player name
     - step
         * validate step
             + wrong color
             + no piece
             + valid step
     - give up (defeated)
     - offer/accept tie
     - save as (filename)
         * (lib function)
     - load game
         * (lib function)

Game state:
    1 string representation for each piece (white/black)
    2D array of gameboard
    steps: doubly-linked list to allow undo and redo
        eg:
            Player: 1 (that moved)
            before:
                A2 - white pawn
            after:
                A3 - white pawn

            Player: 2
            before:
                B3 - black knight
                C5 - white bishop
            after:
                C5 - black knight



   _______________
8 |_|#|_|#|_|#|_|#|
7 |#|_|#|_|#|_|#|_|
6 |_|#|_|#|_|#|_|#|
5 |#|_|#|_|#|_|#|_|
4 |_|#|_|#|_|#|_|#|
3 |#|_|#|_|#|_|#|_|
2 |_|#|_|#|_|#|_|#|
1 |#|_|#|_|#|_|#|_|
   a b c d e f g h

global variables:
    bool is_even(Round_Count) ? white : black
    bool has_moved_white_king
    bool has_moved_white_rook_long
    bool has_moved_white_rook_short
    bool has_moved_black_king
    bool has_moved_black_rook_long
    bool has_moved_black_rook_short

Data Structure of a
Step {
    tiles: [C2, C3];            // Array of Tiles, min:2(normal), max: 4(castling)
    before: [WHITEPAWN, NULL];  // Array of Pieces
    after: [NULL, WHITEPAWN];   // Array of Pieces
} basic step example

Step {
    tiles: [A1, A5];
    before: [WHITEROOK, BLACKBISHOP];
    after: [NULL, WHITEROOK];
} hit example

Data Structure of a
Round {
    Round* prev;
    Round* next;
    Step* step;
}
A Round holds a pointer to the next round (init NULL) and the previous Round.
The Step struct holds the data for the moves of the current round.


castling:
    global variables for white and black kings and rooks
    bool hasmoved
    to check at the beginning of a round

    for WHITE:
        if (white KING has not moved yet && A1 ROOK has not moved yet) {
            can castle long:
                tiles: [A1, C1, D1, E1]
                before: [WHITEROOK, NULL, NULL, WHITEKING];
                after: [NULL, WHITEKING, WHITEROOK, NULL];
        }
        if (white KING has not moved yet && H1 ROOK has not moved yet):
            can castle short:
                tiles: [E1, F1, G1, H1]
                before: [WHITEKING, NULL, NULL, WHITEROOK];
                after: [NULL, WHITEROOK, WHITEKING, NULL];
    for BLACK:
        if (black king has not moved yet && A8 ROOK has  not moved yet) {
            can castle long:
                tiles: [A8, C8, D8, E8]
                before: [BLACKROOK, NULL, NULL, BLACKKING];
                after: [NULL, BLACKKING, BLACKROOK, NULL];
        }
        if (black king has not moved yet && H8 ROOK has  not moved yet) {
            can castle short:
        }


prompt for move:
    either: castle short/castle long
            offer draw
            surrender
    or:
        from: A1-H8
        to: A1-H8
            {
                check if valid from
                    if not, prompt for move
                check if valid to
                    if not, prompt for move
                check if promotion
                    if so, prompt for what piece to sub in
                check if enemy king is checked
                    if so, enemy is only allowed steps that stop the check
                        (step_in_check function?)
                check if checkmate
                    is so, end game, print Winner player
            }
    increment global round count

------------------------

 Piece struct in place of hasmoved bool
 Piece {
      type
      color
      hasmoved
      position
  }

  Position{
      x
      y
  }

  TODO modify printboard with switch-case

  Modify Step struct to
  Step {
    struct Piece before;        // moved piece before move
    struct Piece after;         // after move (info new position and if promoted)
    struct Piece hit;           // piece that was hit and moved out of play
  }
  Need to add parameters for castling?

  DONE CMake instead of Makefile?  ( I didn't add to gitrepo yet, this might mess with IDE )
  DONE split libsakk library into several files, and then compile those into a single library
  TODO rename libsakk to sakk since CMake prefixes it with lib anyway
----------------